// handwashing pomdp spec
// planstep is as usual  (see http://www.cs.toronto.edu/~jhoey/papers/zmj.pdf)
// behavior describes what the user has just done
// responsive describes if the user will respond to a prompt if given
// aware describes how aware the user is of their current situation
// responsive-aware pairs describe the following (Extreme) user types
// responsive,aware  : user will do the right thing if left alone, but will also respond to prompts
// responsive,!aware : user will not do anything if left alone, but will respond to prompts
// !responsive, aware :   user will do the right thing if left alone, and will ignore prompts
// !responsive,!aware : user will not do anything if left alone, and ignores prompts (e.g. the user is asleep)
// cppo17i is cppo17h without the discounted costs
// cppo19m is like cppo19k but with persons being slightly less responsive to more specific prompts than they are
//  currently known to be responsive to (so responseFactorMax, Med are sligthly higher than Min and the order
//  they are used in is changed around
// cppo23a comes from cppo19m but with waterSensor removed
// also took out d2,e2 again!
// also removed planstep c!
// and added additional prompts for turning on/off the tap
// the idea here is to focus on transitions between behaviors as ways of transitioning between plansteps
// thus, the current "planstep" is really planstep x behavior. That is, being in planstep a with hands at soap is quite
// different than being in planstep a with hands at tap. In the first case, if the hands go to sink without a prompt, then
// the user will be in planstep e, whereas in the second, they will be in planstep b. On the other hand, if there is a prompt
// to "use the soap" now and they go to sink, in the first case, they may well be at e, but in the second, they will still be at
// a, since its likely they followed the prompt without ever getting the tap on
// so this makes planstep c become unnecessary, since you can be in planstep b with wet or dry hands, it doesn't matter.
// cppo23i is like cppo23h but makes awareness change in response to a prompt only at correct specificity
// this worked pretty well, but due to weak beliefs about repsonsiveness, made it unlikely that the awareness would improve
// very much due to a prompt. If the user  does respond, then the responsiveness to that specificity gets way to high as well,
// since its the only factor that could be responsible for the response (its not that the prompt made the person aware)
// cppo23j tones cppo23i down in this respect by making lower specificity prompts (than the responsiveness of the user) still
// have an effect on the user's awareness, but lesss so
// cppo23l changed the costs slightly
// cppo23m increased the response factors a bit.
// cppo24b is cppo23m but adds back in the call caregiver action
// cppo24c is cppo24b with a correction to psdd_other_j_taps (which was totally off), and an increase in caregiver costs
// cppo24e is cppo23p but adds back in the call caregiver action
// 31a changed psdd_none_b_taps from 30a - did not take into account regressions from b or d
// 33a inherits from 31g but makes awareness changes due to prompts last for 2 time steps to deal with
//     problem of tap-on being issued immediately after water-on when hand reaches tap in 2 time steps
// 36a inherits from 34h but reverts some things back to as in 31g
// 37a inherits from 36h but changed behaviormovetotaps to not include 'wet' as a possibility

// actions
variable prompt (nothing call_caregiver wet_hands turnon_water tap_on turnoff_water tap_off use_soap use_pump dry_hands)
variable spec (min max vid)


variable planstep (a b d e g j h k)
variable handswashed (false true)
variable samebeh (no yes)
variable behavior (away sink wet taps soap dry)
variable responsive (none video max min)
variable aware (never no yes)
variable demlev (lo med hi)
variable lp (none cg wateron tapon wateroff tapoff wet soap pump dry)
variable lpspec (min max vid)


// utility variables
variable specCost (0.0 -0.01 -0.02 -0.03 -0.04 -0.05 -0.1 -0.4 -0.6 -0.8 -2.2 -4.2 -6.8 -10.0 -16.0)
variable promptCost (0.0 -10.0)
variable reward (0.0 20.0)

// away...towel means both hands at that location or either hand if its a one-handed job (tap, sink or away)
// other observations are as indicated
variable handlocs (away sink water tap soap towel onewater onesoap onetowel tapwater watertowel)
variable timeout (no yes)
variable pstepo (none a b d e g j h k)


//costs for prompts of differing specificity levels
dd minCostNeverAware
   (specCost'=-0.01)
enddd
dd maxCostNeverAware
   (specCost'=-0.02)
enddd
dd vidCostNeverAware
   (specCost'=-0.03)
enddd
dd caregiverCostNeverAware
   (responsive  (none   (specCost'=-0.04))
        (video  (specCost'=-10.0))
        (max    (specCost'=-10.0))
        (min    (specCost'=-10.0)))
enddd
dd minCostNotAware
   (specCost'=-0.05)
enddd
dd maxCostNotAware
   (specCost'=-0.4)
enddd
dd vidCostNotAware
   (specCost'=-0.6)
enddd
dd caregiverCostNotAware
   (responsive  (none   (specCost'=-0.8))
        (video  (specCost'=-10.0))
        (max    (specCost'=-10.0))
        (min    (specCost'=-10.0)))
enddd
dd minCostAware
   (specCost'=-2.2)
enddd
dd maxCostAware
   (specCost'=-4.2)
enddd
dd vidCostAware
   (specCost'=-6.8)
enddd
dd caregiverCostAware
   (specCost'=-16.0)
enddd
dd minCostAwaFunc
   (aware   (never  (minCostNeverAware))
        (no (minCostNotAware))
        (yes    (minCostAware)))
enddd
dd maxCostAwaFunc
   (aware   (never  (maxCostNeverAware))
        (no (maxCostNotAware))
        (yes    (maxCostAware)))
enddd
dd vidCostAwaFunc
   (aware   (never  (vidCostNeverAware))
        (no (vidCostNotAware))
        (yes    (vidCostAware)))
enddd
//cost for prompting twice in a row
dd ssPromptCost
   (promptCost'=-10.0)
enddd
dd ssPromptCostFunc
   (lp  (none   (promptCost'=0.0))
    (cg (ssPromptCost))
    (wateron    (ssPromptCost))
    (tapon      (ssPromptCost))
    (wateroff   (ssPromptCost))
    (tapoff     (ssPromptCost))
    (wet    (ssPromptCost))
    (soap   (ssPromptCost))
    (pump   (ssPromptCost))
    (dry    (ssPromptCost)))
enddd
// cost of doing nothing
// add a cost here if doing nothing when the user is
// not aware and the hands are still not washed
dd nothingCostFunc
   (handswashed (false     (aware   (never  (specCost'=-0.1))
                    (no (specCost'=0.0))
                    (yes    (specCost'=0.0))))
        (true   (specCost'=0.0)))
enddd
// combined cost functions
//dd minCostFunc
//   [+ (minCostAwaFunc)  (ssPromptCostFunc)]
//enddd
//dd maxCostFunc
//   [+ (maxCostAwaFunc)  (ssPromptCostFunc)]
//enddd
//dd vidCostFunc
//   [+ (vidCostAwaFunc)  (ssPromptCostFunc)]
//enddd
//dd cgCostFunc
//   [+ (aware  (never  (caregiverCostNeverAware))
//      (no (caregiverCostNotAware))
//      (yes    (caregiverCostAware)))
//  (ssPromptCostFunc)]
//enddd
dd nextpsdd
   [+   (0.01)
   (planstep    (a  (planstep'=b))
        (b  (planstep'=d))
        (d  (planstep'=g))
        (e  (planstep'=d))
        (g  (planstep'=h))
        (h  (planstep'=k))
        (j  (planstep'=k))
        (k  (planstep'=k)))]
enddd

// probability they'll fail to get the water on
// e.g. that the hands will return from the tap
// without getting the water on, if no prompt was given
dd ptapfail
   (0.05)
enddd
dd ptapsucc
   [+   (1.0)   [*  (-1.0) (ptapfail)]]
enddd
// this same probability if they were given an appropriate prompt
// e.g. to turn the water on or off
dd ptapfailp
   (0.01)
enddd
dd ptapsuccp
   [+   (1.0)   [*  (-1.0) (ptapfailp)]]
enddd
// probability they'll fail to get soap on
// without a prompt
dd psoapfail
   (0.2)
enddd
dd psoapsucc
   [+   (1.0)   [*  (-1.0) (psoapfail)]]
enddd
// probability they'll fail to get soap on
// with a prompt
dd psoapfailp
   (0.05)
enddd
dd psoapsuccp
   [+   (1.0)   [*  (-1.0) (psoapfailp)]]
enddd
// psdd_<action>_<ps>_<beh>
// give distribution over behavior' and planstep'
// given combination of action,ps,beh in previous time step
dd psdd_none_a_taps
(behavior'  (away   [+  (planstep'=a)   (planstep'=b)])
        // here is where the expectation of how often they'll get the taps on happens
        (sink   [+  [*  (ptapsucc)  (planstep'=b)]  [*  (ptapfail) (planstep'=a)]])
        (wet    [+  [*  (ptapsucc)  (planstep'=b)]  [*  (ptapfail) (planstep'=a)]])
        (taps   (planstep'=a))
        (soap   [+  [*  (ptapsucc)  (planstep'=b)]  [*  (ptapfail) (planstep'=a)]])
        (dry    [+  [*  (ptapsucc)  (planstep'=b)]  [*  (ptapfail) (planstep'=a)]]))
enddd
dd psdd_prompt_a_taps
(behavior'  (away   [+  (planstep'=a)   (planstep'=b)])
        // here is where the expectation of how often they'll get the taps on happens
        (sink   [+  [*  (ptapsuccp) (planstep'=b)]  [*  (ptapfailp) (planstep'=a)]])
        (wet    [+  [*  (ptapsuccp) (planstep'=b)]  [*  (ptapfailp) (planstep'=a)]])
        (taps   (planstep'=a))
        (soap   [+  [*  (ptapsuccp) (planstep'=b)]  [*  (ptapfailp) (planstep'=a)]])
        (dry    [+  [*  (ptapsuccp) (planstep'=b)]  [*  (ptapfailp) (planstep'=a)]]))
enddd
dd psdd_none_a_soap
(behavior'  (away   [+  (planstep'=a)   (planstep'=e)])
        (sink   [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=a)]])
        (wet    [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=a)]])
        (taps   [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=a)]])
        (soap   (planstep'=a))
        (dry    (planstep'=a)))
enddd
dd psdd_prompt_a_soap
(behavior'  (away   [+  (planstep'=a)   (planstep'=e)])
        (sink   [+  [*  (psoapsuccp)    (planstep'=e)]  [*  (psoapfailp) (planstep'=a)]])
        (wet    [+  [*  (psoapsuccp)    (planstep'=e)]  [*  (psoapfailp) (planstep'=a)]])
        (taps   [+  [*  (psoapsuccp)    (planstep'=e)]  [*  (psoapfailp) (planstep'=a)]])
        (soap   (planstep'=a))
        (dry    (planstep'=a)))
enddd
// psdd_<action>_<ps>
// give distribution over behavior' and planstep'
// given combination of action,ps in previous time step
// for each behavior in previous time step
dd psdd_none_a
(behavior   (away   (planstep'=a))
        (sink   (planstep'=a))
        (wet    (planstep'=a))
        (taps   (psdd_none_a_taps))
        (soap   (psdd_none_a_soap))
        (dry    (planstep'=a)))
enddd
dd psdd_pump_a
(behavior   (away   (planstep'=a))
        (sink   (planstep'=a))
        (wet    (planstep'=a))
        (taps   (planstep'=a))
        (soap   (psdd_prompt_a_soap))
        (dry    (planstep'=a)))
enddd
dd psdd_tapon_a
(behavior   (away   (planstep'=a))
        (sink   (planstep'=a))
        (wet    (planstep'=a))
        (taps   (psdd_prompt_a_taps))
        (soap   (planstep'=a))
        (dry    (planstep'=a)))
enddd
dd psdd_other_a
   (planstep'=a)
enddd
dd psdd_none_b_taps
(behavior'  (away   [+  (planstep'=a)   (planstep'=b)])
        (sink   [+  [*  (ptapsucc)  (planstep'=a)]  [*  (ptapfail) (planstep'=b)]])
        (wet    [+  [*  (ptapsucc)  (planstep'=a)]  [*  (ptapfail) (planstep'=b)]])
        (taps   (planstep'=b))
        (soap   [+  [*  (ptapsucc)  (planstep'=a)]  [*  (ptapfail) (planstep'=b)]])
        (dry    [+  [*  (ptapsucc)  (planstep'=a)]  [*  (ptapfail) (planstep'=b)]]))
enddd
dd psdd_none_b_soap
(behavior'  (away   [+  (planstep'=b)   (planstep'=d)])
        (sink   [+  [*  (psoapsucc) (planstep'=d)]  [*  (psoapfail) (planstep'=b)]])
        (wet    [+  [*  (psoapsucc) (planstep'=g)]  [*  (psoapfail) (planstep'=b)]])
        (taps   [+  [*  (psoapsucc) (planstep'=d)]  [*  (psoapfail) (planstep'=b)]])
        (soap   (planstep'=b))
        (dry    (planstep'=b)))
enddd
dd psdd_prompt_b_soap
(behavior'  (away   [+  (planstep'=b)   (planstep'=d)])
        (sink   [+  [*  (psoapsuccp)    (planstep'=d)]  [*  (psoapfailp) (planstep'=b)]])
        (wet    [+  [*  (psoapsuccp)    (planstep'=g)]  [*  (psoapfailp) (planstep'=b)]])
        (taps   [+  [*  (psoapsuccp)    (planstep'=d)]  [*  (psoapfailp) (planstep'=b)]])
        (soap   (planstep'=b))
        (dry    (planstep'=b)))
enddd
dd psdd_none_b
(behavior   (away   (planstep'=b))
        (sink   (planstep'=b))
        (wet    (planstep'=b))
        (taps   (psdd_none_b_taps))
        (soap   (psdd_none_b_soap))
        (dry    (planstep'=b)))
enddd
dd psdd_pump_b
  (behavior (away   (planstep'=b))
        (sink   (planstep'=b))
        (wet    (planstep'=b))
        (taps   (psdd_none_b_taps))
        (soap   (psdd_prompt_b_soap))
        (dry    (planstep'=b)))
enddd
dd psdd_other_b
(behavior   (away   (planstep'=b))
        (sink   (planstep'=b))
        (wet    (planstep'=b))
        (taps   (psdd_none_b_taps))
        (soap   (planstep'=b))
        (dry    (planstep'=b)))
enddd
dd psdd_none_d_taps
(behavior'  (away   [+  (planstep'=d)   (planstep'=e)])
        (sink   [+  [*  (ptapsucc)  (planstep'=e)]  [*  (ptapfail) (planstep'=d)]])
        (wet    [+  [*  (ptapsucc)  (planstep'=e)]  [*  (ptapfail) (planstep'=d)]])
        (taps   (planstep'=d))
        (soap   [+  [*  (ptapsucc)  (planstep'=e)]  [*  (ptapfail) (planstep'=d)]])
        (dry    [+  [*  (ptapsucc)  (planstep'=e)]  [*  (ptapfail) (planstep'=d)]]))
enddd
dd psdd_none_d
(behavior   (away   (behavior'  (away   (planstep'=d))
                    (sink   (planstep'=d))
                    (wet    (planstep'=g))
                    (taps   (planstep'=d))
                    (soap   (planstep'=d))
                    (dry    (planstep'=b))))
        (sink   (behavior'  (away   (planstep'=d))
                    (sink   (planstep'=d))
                    (wet    (planstep'=g))
                    (taps   (planstep'=d))
                    (soap   (planstep'=d))
                    (dry    (planstep'=b))))
        (wet    (behavior'  (away   (planstep'=d))
                    (sink   (planstep'=d))
                    (wet    (planstep'=g))
                    (taps   (planstep'=d))
                    (soap   (planstep'=d))
                    (dry    (planstep'=b))))
        (taps  (psdd_none_d_taps))
        (soap       (behavior'  (away   (planstep'=d))
                        (sink   (planstep'=d))
                        (wet    (planstep'=g))
                        (taps   (planstep'=d))
                        (soap   (planstep'=d))
                        (dry    (planstep'=b))))
        (dry        (behavior'  (away   (planstep'=d))
                        (sink   (planstep'=d))
                        (wet    [+  (planstep'=b) (planstep'=g)])
                        (taps   (planstep'=d))
                        (soap   (planstep'=d))
                        (dry    (planstep'=b)))))
enddd
dd psdd_none_e_away
(behavior'  (away   (planstep'=e))
        (sink   (planstep'=e))
        (wet    (planstep'=e))
        (taps   (planstep'=e))
        (soap   (planstep'=e))
        (dry    (planstep'=a)))
enddd
dd psdd_none_e_sink
(behavior'  (away   (planstep'=e))
        (sink   (planstep'=e))
        (wet    (planstep'=e))
        (taps   (planstep'=e))
        (soap   (planstep'=e))
        (dry    (planstep'=a)))
enddd
dd psdd_none_e_wet
(behavior'  (away   (planstep'=e))
        (sink   (planstep'=e))
        (wet    (planstep'=e))
        (taps   (planstep'=e))
        (soap   (planstep'=e))
        (dry    (planstep'=a)))
enddd

dd psdd_none_e_taps
(behavior'  (away   [+  (planstep'=e)   (planstep'=d)])
        // here is where the expectation of how often they'll get the taps on happens
        (sink   [+  [*  (ptapsucc)  (planstep'=d)]  [*  (ptapfail) (planstep'=e)]])
        (wet    [+  [*  (ptapsucc)  (planstep'=g)]  [*  (ptapfail) (planstep'=e)]])
        (taps   (planstep'=e))
        (soap   [+  [*  (ptapsucc)  (planstep'=b)]  [*  (ptapfail) (planstep'=e)]])
        (dry    [+  [*  (ptapsucc)  (planstep'=b)]  [*  (ptapfail) (planstep'=e)]]))
enddd
dd psdd_prompt_e_taps
(behavior'  (away   [+  (planstep'=e)   (planstep'=d)])
        // here is where the expectation of how often they'll get the taps on happens
        (sink   [+  [*  (ptapsuccp) (planstep'=d)]  [*  (ptapfailp) (planstep'=e)]])
        (wet    [+  [*  (ptapsuccp) (planstep'=g)]  [*  (ptapfailp) (planstep'=e)]])
        (taps   (planstep'=e))
        (soap   [+  [*  (ptapsuccp) (planstep'=b)]  [*  (ptapfailp) (planstep'=e)]])
        (dry    [+  [*  (ptapsuccp) (planstep'=b)]  [*  (ptapfailp) (planstep'=e)]]))
enddd

dd psdd_none_e_soap
(behavior'  (away   (planstep'=e))
        (sink   (planstep'=e))
        (wet    (planstep'=e))
        (taps   (planstep'=e))
        (soap   (planstep'=e))
        (dry    (planstep'=a)))
enddd
dd psdd_none_e_dry
(behavior'  (away   (planstep'=e))
        (sink   (planstep'=e))
        (wet    (planstep'=e))
        (taps   (planstep'=e))
        (soap   (planstep'=e))
        (dry    (planstep'=a)))
enddd
dd psdd_none_e
(behavior   (away   (psdd_none_e_away))
        (sink   (psdd_none_e_sink))
        (wet    (psdd_none_e_wet))
        (taps   (psdd_none_e_taps))
        (soap   (psdd_none_e_soap))
        (dry    (psdd_none_e_dry)))
enddd
dd psdd_tapon_e
   (behavior    (away   (psdd_none_e_away))
        (sink   (psdd_none_e_sink))
        (wet    (psdd_none_e_wet))
        (taps   (psdd_prompt_e_taps))
        (soap   (psdd_none_e_soap))
        (dry    (psdd_none_e_dry)))
enddd
dd psdd_other_e
(behavior   (away   (psdd_none_e_away))
        (sink   (psdd_none_e_sink))
        (wet    (psdd_none_e_wet))
        (taps   (planstep'=e))
        (soap   (psdd_none_e_soap))
        (dry    (psdd_none_e_dry)))
enddd
dd psdd_none_g_away
(behavior'  (away   (planstep'=g))
        (sink   (planstep'=g))
        (wet    (planstep'=g))
        (taps   (planstep'=g))
        (soap   (planstep'=g))
        (dry    (planstep'=j)))
enddd
dd psdd_none_g_sink
(behavior'  (away   (planstep'=g))
        (sink   (planstep'=g))
        (wet    (planstep'=g))
        (taps   (planstep'=g))
        (soap   (planstep'=g))
        (dry    (planstep'=j)))
enddd
dd psdd_none_g_wet
(behavior'  (away   (planstep'=g))
        (sink   (planstep'=g))
        (wet    (planstep'=g))
        (taps   (planstep'=g))
        (soap   (planstep'=g))
        (dry    (planstep'=j)))
enddd
dd psdd_none_g_taps
(behavior'  (away   [+  (planstep'=g)   (planstep'=h)])
        (sink   [+  [*  (ptapsucc)  (planstep'=h)]  [*  (ptapfail) (planstep'=g)]])
        (wet    [+  [*  (ptapsucc)  (planstep'=h)]  [*  (ptapfail) (planstep'=g)]])
        (taps   (planstep'=g))
        (soap   [+  [*  (ptapsucc)  (planstep'=h)]  [*  (ptapfail) (planstep'=g)]])
        (dry    [+  [*  (ptapsucc)  (planstep'=k)]  [*  (ptapfail) (planstep'=g)]]))
enddd
dd psdd_prompt_g_taps
(behavior'  (away   [+  (planstep'=g)   (planstep'=h)])
        (sink   [+  [*  (ptapsuccp) (planstep'=h)]  [*  (ptapfailp) (planstep'=g)]])
        (wet    [+  [*  (ptapsuccp) (planstep'=h)]  [*  (ptapfailp) (planstep'=g)]])
        (taps   (planstep'=g))
        (soap   [+  [*  (ptapsuccp) (planstep'=h)]  [*  (ptapfailp) (planstep'=g)]])
        (dry    [+  [*  (ptapsuccp) (planstep'=k)]  [*  (ptapfailp) (planstep'=g)]]))
enddd
dd psdd_other_g_taps
(behavior'  (away   (planstep'=g))
        (sink   (planstep'=g))
        (wet    (planstep'=g))
        (taps   (planstep'=g))
        (soap   (planstep'=g))
        (dry    (planstep'=j)))
enddd

dd psdd_none_g_soap
(behavior'  (away   [+  (planstep'=g)   (planstep'=d)])
        (sink   [+  [*  (psoapsucc) (planstep'=d)]  [*  (psoapfail) (planstep'=g)]])
        (wet    [+  [*  (psoapsucc) (planstep'=g)]  [*  (psoapfail) (planstep'=g)]])
        (taps   [+  [*  (psoapsucc) (planstep'=d)]  [*  (psoapfail) (planstep'=g)]])
        (soap   (planstep'=g))
        (dry    [+  [*  (psoapsucc) (planstep'=d)]  [*  (psoapfail) (planstep'=g)]]))
enddd
dd psdd_none_g_dry
(behavior'  (away   (planstep'=j))
        (sink   (planstep'=j))
        (wet    (planstep'=g))
        (taps   (planstep'=j))
        (soap   (planstep'=j))
        (dry    (planstep'=j)))
enddd
dd psdd_none_g
(behavior   (away   (psdd_none_g_away))
        (sink   (psdd_none_g_sink))
        (wet    (psdd_none_g_wet))
        (taps   (psdd_none_g_taps))
        (soap   (psdd_none_g_soap))
        (dry    (psdd_none_g_dry)))
enddd
dd psdd_tapoff_g
   (behavior    (away   (psdd_none_g_away))
        (sink   (psdd_none_g_sink))
        (wet    (psdd_none_g_wet))
        (taps   (psdd_prompt_g_taps))
        (soap   (psdd_none_g_soap))
        (dry    (psdd_none_g_dry)))

enddd
dd psdd_other_g
(behavior   (away   (psdd_none_g_away))
        (sink   (psdd_none_g_sink))
        (wet    (psdd_none_g_wet))
        (taps   (psdd_other_g_taps))
        (soap   (psdd_none_g_soap))
        (dry    (psdd_none_g_dry)))
enddd
dd psdd_none_j_away
(behavior'  (away   (planstep'=j))
        (sink   (planstep'=j))
        (wet    (planstep'=g))
        (taps   (planstep'=j))
        (soap   (planstep'=j))
        (dry    (planstep'=j)))
enddd
dd psdd_none_j_sink
(behavior'  (away   (planstep'=j))
        (sink   (planstep'=j))
        (wet    (planstep'=g))
        (taps   (planstep'=j))
        (soap   (planstep'=j))
        (dry    (planstep'=j)))
enddd
dd psdd_none_j_wet
(behavior'  (away   (planstep'=j))
        (sink   (planstep'=j))
        (wet    (planstep'=g))
        (taps   (planstep'=j))
        (soap   (planstep'=j))
        (dry    (planstep'=j)))
enddd
dd psdd_none_j_taps
(behavior'  (away   [+  (planstep'=j)   (planstep'=k)])
        (sink   [+  [*  (ptapsucc)  (planstep'=k)]  [*  (ptapfail) (planstep'=j)]])
        (wet    [+  [*  (ptapsucc)  (planstep'=k)]  [*  (ptapfail) (planstep'=j)]])
        (taps   (planstep'=j))
        (soap   [+  [*  (ptapsucc)  (planstep'=k)]  [*  (ptapfail) (planstep'=j)]])
        (dry    [+  [*  (ptapsucc)  (planstep'=k)]  [*  (ptapfail) (planstep'=j)]]))
enddd
dd psdd_prompt_j_taps
(behavior'  (away   [+  (planstep'=j)   (planstep'=k)])
        (sink   [+  [*  (ptapsuccp) (planstep'=k)]  [*  (ptapfailp) (planstep'=j)]])
        (wet    [+  [*  (ptapsuccp) (planstep'=k)]  [*  (ptapfailp) (planstep'=j)]])
        (taps   (planstep'=j))
        (soap   [+  [*  (ptapsuccp) (planstep'=k)]  [*  (ptapfailp) (planstep'=j)]])
        (dry    [+  [*  (ptapsuccp) (planstep'=k)]  [*  (ptapfailp) (planstep'=j)]]))
enddd
dd psdd_other_j_taps
(behavior'  (away   (planstep'=k))
        (sink   (planstep'=k))
        (wet    (planstep'=k))
        (taps   (planstep'=j))
        (soap   (planstep'=k))
        (dry    (planstep'=k)))
enddd
dd psdd_none_j_soap
(behavior'  (away   [+  (planstep'=d)   (planstep'=j)])
        (sink   [+  [*  (psoapsucc) (planstep'=d)]  [*  (psoapfail) (planstep'=j)]])
        (wet    [+  [*  (psoapsucc) (planstep'=g)]  [*  (psoapfail) (planstep'=j)]])
        (taps   [+  [*  (psoapsucc) (planstep'=d)]  [*  (psoapfail) (planstep'=j)]])
        (soap   (planstep'=j))
        (dry    [+  [*  (psoapsucc) (planstep'=d)]  [*  (psoapfail) (planstep'=j)]]))
enddd
dd psdd_none_j_dry
(behavior'  (away   (planstep'=j))
        (sink   (planstep'=j))
        (wet    (planstep'=g))
        (taps   (planstep'=j))
        (soap   (planstep'=j))
        (dry    (planstep'=j)))
enddd
dd psdd_none_j
(behavior   (away   (psdd_none_j_away))
        (sink   (psdd_none_j_sink))
        (wet    (psdd_none_j_wet))
        (taps   (psdd_none_j_taps))
        (soap   (psdd_none_j_soap))
        (dry    (psdd_none_j_dry)))
enddd
dd psdd_tapoff_j
   (behavior    (away   (psdd_none_j_away))
        (sink   (psdd_none_j_sink))
        (wet    (psdd_none_j_wet))
        (taps   (psdd_prompt_j_taps))
        (soap   (psdd_none_j_soap))
        (dry    (psdd_none_j_dry)))
enddd
dd psdd_other_j
(behavior   (away   (psdd_none_j_away))
        (sink   (psdd_none_j_sink))
        (wet    (psdd_none_j_wet))
        (taps   (psdd_other_j_taps))
        (soap   (psdd_none_j_soap))
        (dry    (psdd_none_j_dry)))
enddd
dd psdd_none_h_soap
(behavior'  (away   [+  (planstep'=e)   (planstep'=h)])
        (sink   [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=h)]])
        (wet    [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=h)]])
        (taps   [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=h)]])
        (soap   (planstep'=h))
        (dry    [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=h)]]))
enddd
dd psdd_none_h_taps
(behavior'  (away   [+  (planstep'=g)   (planstep'=h)])
        (sink   [+  [*  (ptapsucc)  (planstep'=g)]  [*  (ptapfail) (planstep'=h)]])
        (wet    [+  [*  (ptapsucc)  (planstep'=g)]  [*  (ptapfail) (planstep'=h)]])
        (taps   (planstep'=h))
        (soap   [+  [*  (ptapsucc)  (planstep'=g)]  [*  (ptapfail) (planstep'=h)]])
        (dry    [+  [*  (ptapsucc)  (planstep'=g)]  [*  (ptapfail) (planstep'=h)]]))
enddd
dd psdd_none_h
(behavior   (away   (behavior'  (away   (planstep'=h))
                                (sink   (planstep'=h))
                                (wet    (planstep'=h))
                                (taps   (planstep'=h))
                                (soap   (planstep'=h))
                                (dry    (planstep'=k))))
                    (sink   (behavior'  (away   (planstep'=h))
                                (sink   (planstep'=h))
                                (wet    (planstep'=h))
                                (taps   (planstep'=h))
                                (soap   (planstep'=h))
                                (dry    (planstep'=k))))
                    (wet    (behavior'  (away   (planstep'=h))
                                (sink   (planstep'=h))
                                (wet    (planstep'=h))
                                (taps   (planstep'=h))
                                (soap   (planstep'=h))
                                (dry    (planstep'=k))))
                    (taps   (psdd_none_h_taps))
                    (soap   (psdd_none_h_soap))
                    (dry    (planstep'=k)))
enddd
dd psdd_tapoff_h
(behavior   (away   (behavior'  (away   (planstep'=h))
                                (sink   (planstep'=h))
                                (wet    (planstep'=h))
                                (taps   (planstep'=h))
                                (soap   (planstep'=h))
                                (dry    (planstep'=k))))
                    (sink   (behavior'  (away   (planstep'=h))
                                (sink   (planstep'=h))
                                (wet    (planstep'=h))
                                (taps   (planstep'=h))
                                (soap   (planstep'=h))
                                (dry    (planstep'=k))))
                    (wet    (behavior'  (away   (planstep'=h))
                                (sink   (planstep'=h))
                                (wet    (planstep'=h))
                                (taps   (planstep'=h))
                                (soap   (planstep'=h))
                                (dry    (planstep'=k))))
                    (taps   (behavior'  (away   (planstep'=h))
                                (sink   (planstep'=h))
                                (wet    (planstep'=h))
                                (taps   (planstep'=h))
                                (soap   (planstep'=h))
                                (dry    (planstep'=h))))
                    (soap   (behavior'  (away   (planstep'=e))
                                (sink   (planstep'=e))
                                (wet    (planstep'=e))
                                (taps   (planstep'=e))
                                (soap   (planstep'=h))
                                (dry    (planstep'=e))))
                    (dry    (behavior'  (away   (planstep'=h))
                                (sink   (planstep'=h))
                                (wet    (planstep'=h))
                                (taps   (planstep'=h))
                                (soap   (planstep'=h))
                                (dry    (planstep'=k)))))
enddd
dd psdd_none_k_soap
(behavior'  (away   [+  (planstep'=e)   (planstep'=k)])
        (sink   [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=k)]])
        (wet    [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=k)]])
        (taps   [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=k)]])
        (soap   (planstep'=k))
        (dry    [+  [*  (psoapsucc) (planstep'=e)]  [*  (psoapfail) (planstep'=k)]]))
enddd
dd psdd_none_k_taps
(behavior'  (away   [+  (planstep'=j)   (planstep'=k)])
        (sink   [+  [*  (ptapsucc)  (planstep'=j)]  [*  (ptapfail) (planstep'=k)]])
        (wet    [+  [*  (ptapsucc)  (planstep'=j)]  [*  (ptapfail) (planstep'=k)]])
        (taps   (planstep'=k))
        (soap   [+  [*  (ptapsucc)  (planstep'=j)]  [*  (ptapfail) (planstep'=k)]])
        (dry    [+  [*  (ptapsucc)  (planstep'=j)]  [*  (ptapfail) (planstep'=k)]]))
enddd
dd psdd_none_k
(behavior   (away   (planstep'=k))
        (sink   (planstep'=k))
        (wet    (planstep'=k))
        (taps   (psdd_none_k_taps))
        (soap   (psdd_none_k_soap))
        (dry    (planstep'=k)))
enddd
dd planstepdd_none
   (planstep    (a  (psdd_none_a))
        (b  (psdd_none_b))
        (d  (psdd_none_d))
        (e  (psdd_none_e))
        (g  (psdd_none_g))
        (j  (psdd_none_j))
        (h  (psdd_none_h))
        (k  (psdd_none_k)))
enddd
dd planstepdd_tapon
   (planstep    (a  (psdd_tapon_a))
        (b  (psdd_other_b))
        (d  (psdd_none_d))
        (e  (psdd_tapon_e))
        (g  (psdd_other_g))
        (j  (psdd_other_j))
        (h  (psdd_none_h))
        (k  (psdd_none_k)))
enddd
dd planstepdd_tapoff
   (planstep    (a  (psdd_other_a))
        (b  (psdd_other_b))
        (d  (psdd_none_d))
        (e  (psdd_other_e))
        (g  (psdd_tapoff_g))
        (j  (psdd_tapoff_j))
        (h  (psdd_tapoff_h))
        (k  (psdd_none_k)))
enddd
dd planstepdd_pump
   (planstep    (a  (psdd_pump_a))
        (b  (psdd_pump_b))
        (d  (psdd_none_d))
        (e  (psdd_other_e))
        (g  (psdd_other_g))
        (j  (psdd_other_j))
        (h  (psdd_none_h))
        (k  (psdd_none_k)))
enddd
dd planstepdd_other
   (planstep    (a  (psdd_other_a))
        (b  (psdd_other_b))
        (d  (psdd_none_d))
        (e  (psdd_other_e))
        (g  (psdd_other_g))
        (j  (psdd_other_j))
        (h  (psdd_none_h))
        (k  (psdd_none_k)))
enddd
// make new ones here for usetap_on,off
dd correctBehavior
      (planstep (a  (behavior   (away   [+  (behavior'=sink) (behavior'=soap)])
                    (sink   [+  (behavior'=wet)  (behavior'=taps) (behavior'=soap)])
                    (wet    [+  (behavior'=taps)    (behavior'=soap)])
                    (taps   [+  (behavior'=sink)    (behavior'=wet)  (behavior'=soap)])
                    (soap   [+  (behavior'=sink)    (behavior'=wet) (behavior'=taps)])
                    (dry    (0.0))))
        (b  (behavior   (away   [+  (behavior'=sink)    (behavior'=soap)])
                    (sink   [+  (behavior'=wet) (behavior'=soap)])
                    (wet    [+  (behavior'=sink)  (behavior'=soap)])
                    (taps   (0.0))
                    (soap   [+  (behavior'=sink)  (behavior'=wet) (behavior'=taps)])
                    (dry    (0.0))))
        (d  (behavior   (away   [+  (behavior'=sink)    (behavior'=wet)])
                    (sink   (behavior'=wet))
                    (wet    (behavior'=wet))
                    (taps   (0.0))
                    (soap   (0.0))
                    (dry    (0.0))))
        (e  (behavior   (away   [+  (behavior'=sink)    (behavior'=wet) (behavior'=taps)])
                    (sink   [+  (behavior'=wet) (behavior'=taps)])
                    (wet    (behavior'=taps))
                    (taps   [+  (behavior'=wet) (behavior'=sink)])
                    (soap   (0.0))
                    (dry    (0.0))))
        (g  (behavior   (away   [+  (behavior'=sink) (behavior'=wet) (behavior'=taps) (behavior'=dry)])
                    (sink   [+  (behavior'=taps)    (behavior'=wet) (behavior'=dry)])
                    (wet    [+  (behavior'=sink) (behavior'=taps) (behavior'=dry)])
                    (taps   [+  (behavior'=sink) (behavior'=wet) (behavior'=dry)])
                    (soap   [+  (behavior'=sink) (behavior'=wet) (behavior'=taps)   (behavior'=dry)])
                    (dry    [+  (behavior'=sink) (behavior'=taps)])))
        (h  (behavior   (away   [+  (behavior'=sink) (behavior'=dry)])
                    (sink   (behavior'=dry))
                    (wet    [+  (behavior'=sink) (behavior'=dry)])
                    (taps   [+  (behavior'=sink) (behavior'=dry)])
                    (soap   [+  (behavior'=sink) (behavior'=dry)])
                    (dry    (behavior'=dry))))
        (j  (behavior   (away   [+  (behavior'=sink)    (behavior'=wet) (behavior'=taps)])
                    (sink   [+  (behavior'=wet) (behavior'=taps)])
                    (wet    (behavior'=taps))
                    (taps   [+  (behavior'=sink) (behavior'=wet)])
                    (soap   [+  (behavior'=sink)    (behavior'=taps)])
                    (dry    [+  (behavior'=sink)    (behavior'=taps)])))
        (k  [+  (behavior'=away)  (behavior'=sink)]))
enddd
dd incorrectBehavior
      [+ (1.0) [* (-1.0) (correctBehavior)]]
enddd
// behaviors that depend on the water flow will need to depend on the planstep
// other behaviors are planstep independent
// behavior as a response to wet prompt if responsive
dd wetBehavior
   (planstep    (a  [+  (behavior'=wet) (behavior'=taps)])
        (b  (behavior'=wet))
        (d  (behavior'=wet))
        (e  [+  (behavior'=wet) (behavior'=taps)])
        (g  (behavior'=wet))
        (h  [+  (behavior'=wet) (behavior'=taps)])
        (j  (behavior'=wet))
        (k  [+  (behavior'=wet) (behavior'=taps)]))
enddd
dd notWetBehavior
   [+   (1.0)   [* (-1.0) (wetBehavior)]]
enddd
dd behaviormovetotaps
   (behavior    (away   [+ (behavior'=taps) (behavior'=sink)])
        (sink   [+ (behavior'=taps)])
        (wet    (behavior'=taps))
        (taps   (behavior'=taps))
        (soap   [+ (behavior'=taps) (behavior'=sink)])
        (dry    [+ (behavior'=taps) (behavior'=sink)]))
enddd
dd wateronBehavior
   (planstep    (a  (behaviormovetotaps))
        (b  (behavior'=sink))
        (d  (behavior'=sink))
        (e  (behaviormovetotaps))
        (g  (behavior'=sink))
        (h  (behaviormovetotaps))
        (j  (behavior'=sink))
        (k  (behaviormovetotaps)))
enddd
dd notWateronBehavior
   [+   (1.0)   [* (-1.0) (wateronBehavior)]]
enddd
dd behaviormovefromtaps
   (behavior    (away   [+ (behavior'=sink) (behavior'=away)])
        (sink   (behavior'=sink))
        (wet    [+ (behavior'=sink) (behavior'=wet)])
        (taps   [+ (behavior'=sink) (behavior'=wet)])
        (soap   [+ (behavior'=soap) (behavior'=sink) (behavior'=wet)])
        (dry    [+ (behavior'=dry) (behavior'=sink) (behavior'=wet)]))
enddd
dd taponBehavior
   (planstep    (a  (behaviormovefromtaps))
        (b  (behavior'=sink))
        (d  (behavior'=sink))
        (e  (behaviormovefromtaps))
        (g  (behavior'=sink))
        (h  (behaviormovefromtaps))
        (j  (behavior'=sink))
        (k  (behaviormovefromtaps)))
enddd
dd notTaponBehavior
   [+   (1.0)   [* (-1.0) (taponBehavior)]]
enddd
dd wateroffBehavior
   (planstep    (a  (behavior'=sink))
        (b  (behaviormovetotaps))
        (d  (behaviormovetotaps))
        (e  (behavior'=sink))
        (g  (behaviormovetotaps))
        (h  (behavior'=sink))
        (j  (behaviormovetotaps))
        (k  (behavior'=sink)))
enddd
dd notWateroffBehavior
   [+   (1.0)   [* (-1.0) (wateroffBehavior)]]
enddd
dd tapoffBehavior
   (planstep    (a  (behavior'=sink))
        (b  (behaviormovefromtaps))
        (d  (behaviormovefromtaps))
        (e  (behavior'=sink))
        (g  (behaviormovefromtaps))
        (h  (behavior'=sink))
        (j  (behaviormovefromtaps))
        (k  (behavior'=sink)))
enddd
dd notTapoffBehavior
   [+   (1.0)   [* (-1.0) (tapoffBehavior)]]
enddd
dd soapBehavior
   (behavior    (away   (behavior'=soap))
        (sink   (behavior'=soap))
        (wet    (behavior'=soap))
        (taps   (behavior'=soap))
        (soap   (behavior'=soap))
        (dry    (behavior'=soap)))
enddd
dd notSoapBehavior
   [+   (1.0)   [* (-1.0) (soapBehavior)]]
enddd
dd pumpBehavior
   (behavior    (away   [+ [*  (8.0)(behavior'=away)] (behavior'=soap)])
        (sink   [+ [*  (8.0) (behavior'=sink)] (behavior'=soap)])
        (wet    [+ [*  (8.0) (behavior'=wet)] (behavior'=soap)])
        (taps   [+ [*  (8.0) (behavior'=taps)] (behavior'=wet) (behavior'=soap)])
        (soap   [+ (behavior'=taps) (behavior'=sink) (behavior'=wet)])
        (dry    [+ [*  (8.0) (behavior'=dry)] (behavior'=sink) (behavior'=soap)]))
enddd
dd notPumpBehavior
   [+   (1.0)   [* (-1.0) (pumpBehavior)]]
enddd
dd dryBehavior
   (behavior'=dry)
enddd
dd notDryBehavior
   [+   (1.0)   [* (-1.0) (dryBehavior)]]
enddd
dd nullBehavior
   (behavior'   (away       (0.1))
        (sink       (0.1))
        (wet        (0.1))
        (taps       (0.1))
        (soap       (0.1))
        (dry        (0.1)))
enddd
// this constant gives how much more likely a user is to
// perform the correct behavior if they are aware, than if they are not
dd awareFactor
   (20.0)
enddd
// dynamics if the user is to be prompted - this gets multiplied so
// is hard to interpret on its own
dd behDynAwarePrompt
   (aware'  (yes    [+ [* (awareFactor) (correctBehavior)] (incorrectBehavior)])
        (no [+ (nullBehavior) (behavior=behavior')])
        (never  (behavior=behavior')))
enddd
// dynamics if user is not to be prompted - basically says that if they are aware,
// they'll do the right thing and if not, they'll just stay stuck.
// or do something incorrect
dd behDynAware
   (aware'  (yes    [+ [* (awareFactor) (correctBehavior)] (incorrectBehavior)])
        (no [+ (incorrectBehavior) [*  (2.0) (behavior=behavior')]])
        (never  (behavior=behavior')))
enddd
// factors give how much more likely the user will respond to a prompt
// if they are responsive to that level of specificity
dd responseFactorMin
   (aware'  (yes    (20.0))
        (no     (300.0))
        (never  (300.0)))
enddd
dd responseFactorMed
   (aware'  (yes    (20.0))
        (no     (400.0))
        (never  (400.0)))
enddd
dd responseFactorMax
   (aware'  (yes    (20.0))
        (no     (600.0))
        (never  (600.0)))
enddd
dd hwdd
   (handswashed (false  (planstep   (a  (handswashed'=false))
                    (b  (handswashed'=false))
                    (d  (handswashed'=false))
                    (e  (handswashed'=false))
                    (g  (handswashed'=false))
                    (h  (handswashed'=false))
                    (j  (handswashed'=false))
                    (k  (handswashed'=true))))
        (true   (handswashed'=true)))
enddd
dd respDynamics
   (responsive=responsive')
enddd
dd respDynamicsCG
   (responsive' (none   (0.01))
        (video  (0.99))
        (max    (0.01))
        (min    (0.01)))
enddd
// aware dynamics if no prompt is given
dd awarDynamicsNull
   (demlev' (lo (aware  (never  (aware' (never  (0.99999))
                        (no (0.00001))
                        (yes    (0.0))))
                (no (aware' (no (0.95))
                        (yes    (0.001))
                        (never  (0.05))))
                (yes    (aware' (no (0.2))
                        (yes    (0.8))
                        (never  (0.001))))))
        (med    (aware  (never  (aware' (never  (0.99))
                        (no (0.01))
                        (yes    (0.0))))
                (no (aware' (no (0.998))
                        (yes    (0.002))
                        (never  (0.001))))
                (yes    (aware' (no (0.1))
                        (yes    (0.9))
                        (never  (0.001))))))
        (hi (aware  (never  (aware' (never  (0.98))
                        (no (0.02))
                        (yes    (0.001))))
                (no (aware' (no (0.997))
                        (yes    (0.003))
                        (never  (0.001))))
                (yes    (aware' (no (0.001))
                        (yes    (0.999))
                        (never  (0.001)))))))
enddd
// for a higher specificity (than the responsiveness) prompt
dd awarDynamicsPromptNull
   (demlev' (lo (aware  (never  (aware' (never  (0.999))
                        (no (0.001))
                        (yes    (0.0))))
                (no (aware' (no (0.95))
                        (yes    (0.05))
                        (never  (0.001))))
                (yes    (aware' (no (0.01))
                        (yes    (0.99))
                        (never  (0.001))))))
        (med    (aware  (never  (aware' (never  (0.995))
                        (no (0.005))
                        (yes    (0.0001))))
                (no (aware' (no (0.9))
                        (yes    (0.1))
                        (never  (0.001))))
                (yes    (aware' (no (0.001))
                        (yes    (0.999))
                        (never  (0.001))))))
        (hi (aware  (never  (aware' (never  (0.99))
                        (no (0.01))
                        (yes    (0.0001))))
                (no (aware' (no (0.8))
                        (yes    (0.2))
                        (never  (0.001))))
                (yes    (aware' (no (0.0001))
                        (yes    (0.9999))
                        (never  (0.001)))))))
enddd
// aware dynamics if a prompt is given
// a prompt may jar the user out of unawareness
// but only if they are responsive to the level of prompting given
dd awarDynamicsRightResp
   (demlev' (lo (aware  (never  (aware' (never  (0.98))
                        (no (0.02))
                        (yes    (0.00001))))
                (no (aware' (no (0.90))
                        (yes    (0.10))
                        (never  (0.001))))
                (yes    (aware' (no (0.01))
                        (yes    (0.99))
                        (never  (0.001))))))
        (med    (aware  (never  (aware' (never  (0.95))
                        (no (0.05))
                        (yes    (0.00001))))
                (no (aware' (no (0.85))
                        (yes    (0.05))
                        (never  (0.001))))
                (yes    (aware' (no (0.005))
                        (yes    (0.995))
                        (never  (0.001))))))
        (hi (aware  (never  (aware' (never  (0.90))
                        (no (0.1))
                        (yes    (0.00001))))
                (no (aware' (no (0.80))
                        (yes    (0.20))
                        (never  (0.001))))
                (yes    (aware' (no (0.001))
                        (yes    (0.999))
                        (never  (0.001)))))))
enddd
// aware dynamics if caregiver is called
// this will usually jar the user out of unawareness more than any prompt
// since calling the caregiver is like the most specific prompt
dd awarDynamicsCG
   (demlev' (lo (aware  (never  (aware' (never  (0.99999))
                        (no (0.00001))
                        (yes    (0.00001))))
                (no (aware' (no (0.9))
                        (yes    (0.1))
                        (never  (0.001))))
                (yes    (aware' (no (0.01))
                        (yes    (0.99))
                        (never  (0.001))))))
        (med    (aware  (never  (aware' (never  (0.99999))
                        (no (0.00001))
                        (yes    (0.00001))))
                (no (aware' (no (0.88))
                        (yes    (0.12))
                        (never  (0.001))))
                (yes    (aware' (no (0.005))
                        (yes    (0.995))
                        (never  (0.001))))))
        (hi (aware  (never  (aware' (never  (0.99999))
                        (no (0.00001))
                        (yes    (0.00001))))
                (no (aware' (no (0.85))
                        (yes    (0.15))
                        (never  (0.001))))
                (yes    (aware' (no (0.001))
                        (yes    (0.999))
                        (never  (0.001)))))))
enddd
dd awarDynamicsVideo
   (responsive  (none   (awarDynamicsNull))
        (video  (awarDynamicsRightResp))
        (max    (awarDynamicsPromptNull))
        (min    (awarDynamicsPromptNull)))
enddd
dd awarDynamicsMax
   (responsive  (none   (awarDynamicsNull))
        (video  (awarDynamicsNull))
        (max    (awarDynamicsRightResp))
        (min    (awarDynamicsPromptNull)))
enddd
dd awarDynamicsMin
   (responsive  (none   (awarDynamicsNull))
        (video  (awarDynamicsNull))
        (max    (awarDynamicsNull))
        (min    (awarDynamicsRightResp)))
enddd

//Plansteps where the water is on
dd waterOnPS
   (planstep    (a  (0.0))
        (b  (1.0))
        (d  (1.0))
        (e  (0.0))
        (g  (1.0))
        (h  (0.0))
        (j  (1.0))
        (k  (0.0)))
enddd
dd waterOffPS
   [+   (1.0)   [*  (-1.0)  (waterOnPS)]]
enddd
//Plansteps where the hands are soapy
dd soapyPS
   (planstep    (a  (0.0))
        (b  (0.0))
        (d  (1.0))
        (e  (1.0))
        (g  (0.0))
        (h  (0.0))
        (j  (0.0))
        (k  (0.0)))
enddd
dd notSoapyPS
   [+   (1.0)   [*  (-1.0)  (soapyPS)]]
enddd

//Plansteps where the hands may be wet
dd wetPS
   (planstep    (a  (0.0))
        (b  (0.0))
        (d  (1.0))
        (e  (0.0))
        (g  (1.0))
        (h  (1.0))
        (j  (0.0))
        (k  (0.0)))
enddd
dd dryPS
   [+   (1.0)   [*  (-1.0)  (wetPS)]]
enddd


dd strangeConstant
  (1.0)
enddd
// the following dds give the effects of responsivness on behavior dynamics for different prompts
// also for water dynamics (same thing),
dd behDynWetRespMax
   [+   [*  (waterOnPS) [*  [+  (behDynAwarePrompt) [*  (strangeConstant) (wetBehavior)]]
                    [+ (notWetBehavior) [* (responseFactorMax) (wetBehavior)]]]]
       [*      (waterOffPS) (behDynAware)]]
enddd
dd behDynWetRespMed
   [+   [*  (waterOnPS) [*  [+  (behDynAwarePrompt) [*  (strangeConstant) (wetBehavior)]]
                    [+ (notWetBehavior) [* (responseFactorMed) (wetBehavior)]]]]
       [*      (waterOffPS) (behDynAware)]]
enddd
dd behDynWetRespMin
   [+   [*  (waterOnPS) [*  [+  (behDynAwarePrompt) [*  (strangeConstant) (wetBehavior)]]
                    [+ (notWetBehavior) [* (responseFactorMin) (wetBehavior)]]]]
       [*      (waterOffPS) (behDynAware)]]
enddd
dd  behDynWetMin
   (responsive' (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynAware))
        (min    (behDynWetRespMax)))
enddd
dd behDynWetMax
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynWetRespMax))
        (min    (behDynWetRespMed)))
enddd
dd behDynWetVid
(responsive'    (none   (behDynAware))
        (video  (behDynWetRespMax))
        (max    (behDynWetRespMed))
        (min    (behDynWetRespMin)))
enddd
// HERE  - for waterOffPS should be more like behDynAware?
//but its not behDynAwarePrompt that is causing the problem for
// if that is changed to behDynAware, then awareness changes as expected
dd behDynWaterOnRespMax
   [+   [*  (waterOffPS)    [* [+ (behDynAwarePrompt) [*  (strangeConstant) (wateronBehavior)]]
                       [+ (notWateronBehavior) [* (responseFactorMax) (wateronBehavior)]]]]
        [*      (waterOnPS) (behDynAware)]]
enddd
dd behDynWaterOnRespMed
   [+   [*  (waterOffPS)    [* [+ (behDynAwarePrompt) [*  (strangeConstant) (wateronBehavior)]]
                   [+ (notWateronBehavior) [* (responseFactorMed) (wateronBehavior)]]]]
      [*      (waterOnPS)   (behDynAware)]]
enddd
dd behDynWaterOnRespMin
   [+   [*  (waterOffPS)    [* [+ (behDynAwarePrompt) [*  (strangeConstant) (wateronBehavior)]]
                   [+ (notWateronBehavior) [* (responseFactorMin) (wateronBehavior)]]]]
    [*      (waterOnPS) (behDynAware)]]
enddd
dd behDynWaterOnMin
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynAware))
        (min    (behDynWaterOnRespMax)))
enddd
dd behDynWaterOnMax
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynWaterOnRespMax))
        (min    (behDynWaterOnRespMed)))

enddd
dd behDynWaterOnVid
(responsive'    (none   (behDynAware))
        (video  (behDynWaterOnRespMax))
        (max    (behDynWaterOnRespMed))
        (min    (behDynWaterOnRespMin)))
enddd
dd behDynTapOnRespMax
   [+   [*  (waterOffPS)        [* [+ (behDynAwarePrompt) [*  (strangeConstant) (taponBehavior)]]
                       [+ (notTaponBehavior) [* (responseFactorMax) (taponBehavior)]]]]
    [*      (waterOnPS)     (behDynAware)]]
enddd
dd behDynTapOnRespMed
   [+   [*  (waterOffPS)        [* [+ (behDynAwarePrompt) [*  (strangeConstant) (taponBehavior)]]
                       [+ (notTaponBehavior) [* (responseFactorMed) (taponBehavior)]]]]
    [*      (waterOnPS)     (behDynAware)]]
enddd
dd behDynTapOnRespMin
   [+   [*  (waterOffPS)        [* [+ (behDynAwarePrompt) [*  (strangeConstant) (taponBehavior)]]
                       [+ (notTaponBehavior) [* (responseFactorMin) (taponBehavior)]]]]
    [*      (waterOnPS)     (behDynAware)]]
enddd
dd behDynTapOnMin
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynAware))
        (min    (behDynTapOnRespMax)))
enddd
dd behDynTapOnMax
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynTapOnRespMax))
        (min    (behDynTapOnRespMed)))
enddd
dd behDynTapOnVid
(responsive'    (none   (behDynAware))
        (video  (behDynTapOnRespMax))
        (max    (behDynTapOnRespMed))
        (min    (behDynTapOnRespMin)))
enddd

dd behDynWaterOffRespMax
   [+   [*  (waterOnPS) [* [+ (behDynAwarePrompt) [*  (strangeConstant) (wateroffBehavior)]]
                   [+ (notWateroffBehavior)
                      [* (responseFactorMax) (wateroffBehavior)]]]]
    [*  (waterOffPS)          (behDynAware)]]
enddd
dd behDynWaterOffRespMed
   [+   [*  (waterOnPS) [* [+ (behDynAwarePrompt) [*  (strangeConstant) (wateroffBehavior)]]
                   [+ (notWateroffBehavior) [* (responseFactorMed) (wateroffBehavior)]]]]
    [*  (waterOffPS)          (behDynAware)]]
enddd
dd behDynWaterOffRespMin
   [+   [*  (waterOnPS) [* [+ (behDynAwarePrompt) [*  (strangeConstant) (wateroffBehavior)]]
                   [+ (notWateroffBehavior) [* (responseFactorMin) (wateroffBehavior)]]]]
        [*  (waterOffPS)          (behDynAware)]]
enddd

dd behDynWaterOffMin
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynAware))
        (min    (behDynWaterOffRespMax)))
enddd
dd behDynWaterOffMax
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynWaterOffRespMax))
        (min    (behDynWaterOffRespMed)))
enddd
dd behDynWaterOffVid
(responsive'    (none   (behDynAware))
        (video  (behDynWaterOffRespMax))
        (max    (behDynWaterOffRespMed))
        (min    (behDynWaterOffRespMin)))
enddd
dd behDynTapOffRespMax
   [+   [*  (waterOnPS)     [* [+ (behDynAwarePrompt) [*  (strangeConstant) (tapoffBehavior)]]
                       [+ (notTapoffBehavior) [* (responseFactorMax) (tapoffBehavior)]]]]
        [*  (waterOffPS)          (behDynAware)]]
enddd
dd behDynTapOffRespMed
   [+   [*  (waterOnPS)     [* [+ (behDynAwarePrompt) [*  (strangeConstant) (tapoffBehavior)]]
                       [+ (notTapoffBehavior) [* (responseFactorMed) (tapoffBehavior)]]]]
        [*  (waterOffPS)          (behDynAware)]]
enddd
dd behDynTapOffRespMin
   [+   [*  (waterOnPS)     [* [+ (behDynAwarePrompt) [*  (strangeConstant) (tapoffBehavior)]]
                       [+ (notTapoffBehavior) [* (responseFactorMin) (tapoffBehavior)]]]]
        [*  (waterOffPS)          (behDynAware)]]
enddd
dd behDynTapOffMin
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynAware))
        (min    (behDynTapOffRespMax)))
enddd
dd behDynTapOffMax
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynTapOffRespMax))
        (min    (behDynTapOffRespMed)))
enddd
dd behDynTapOffVid
(responsive'    (none   (behDynAware))
        (video  (behDynTapOffRespMax))
        (max    (behDynTapOffRespMed))
        (min    (behDynTapOffRespMin)))
enddd
//dd behDynSoapRespMax
//    [+    [*  (notSoapyPS)        [* [+ (behDynAwarePrompt) (soapBehavior)]
//                     [+ (notSoapBehavior) [* (responseFactorMax) (soapBehavior)]]]]
//        [*    (soapyPS)         (behDynAware)]]
//enddd
//dd behDynSoapRespMed
//    [+    [*  (notSoapyPS)        [* [+ (behDynAwarePrompt) (soapBehavior)]
//                     [+ (notSoapBehavior) [* (responseFactorMed) (soapBehavior)]]]]
//        [*    (soapyPS)         (behDynAware)]]
//enddd
//dd behDynSoapRespMin
//    [+    [*  (notSoapyPS)        [* [+ (behDynAwarePrompt) (soapBehavior)]
//                     [+ (notSoapBehavior) [* (responseFactorMin) (soapBehavior)]]]]
////        [*  (soapyPS)         (behDynAware)]]
//enddd
dd behDynSoapRespMax
    [* [+ (behDynAwarePrompt)   [*  (strangeConstant) (soapBehavior)]]
       [+ (notSoapBehavior) [* (responseFactorMax) (soapBehavior)]]]
enddd
dd behDynSoapRespMed
    [* [+ (behDynAwarePrompt)  [*  (strangeConstant) (soapBehavior)]]
       [+ (notSoapBehavior) [* (responseFactorMed) (soapBehavior)]]]
enddd
dd behDynSoapRespMin
    [* [+ (behDynAwarePrompt)  [*  (strangeConstant) (soapBehavior)]]
       [+ (notSoapBehavior) [* (responseFactorMin) (soapBehavior)]]]
enddd
dd behDynSoapMin
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynAware))
        (min    (behDynSoapRespMax)))
enddd
dd behDynSoapMax
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynSoapRespMax))
        (min    (behDynSoapRespMed)))
enddd
dd behDynSoapVid
(responsive'    (none   (behDynAware))
        (video  (behDynSoapRespMax))
        (max    (behDynSoapRespMed))
        (min    (behDynSoapRespMin)))
enddd
dd behDynPumpRespMax
    [+  [*  (notSoapyPS)        [* [+ (behDynAwarePrompt) [* (strangeConstant) (pumpBehavior)]]
                       [+ (notPumpBehavior) [* (responseFactorMax) (pumpBehavior)]]]]
        [*  (soapyPS)         (behDynAware)]]
enddd
dd behDynPumpRespMed
    [+  [*  (notSoapyPS)        [* [+ (behDynAwarePrompt) [* (strangeConstant) (pumpBehavior)]]
                       [+ (notPumpBehavior) [* (responseFactorMed) (pumpBehavior)]]]]
        [*  (soapyPS)         (behDynAware)]]
enddd
dd behDynPumpRespMin
    [+  [*  (notSoapyPS)        [* [+ (behDynAwarePrompt) [* (strangeConstant) (pumpBehavior)]]
                       [+ (notPumpBehavior) [* (responseFactorMin) (pumpBehavior)]]]]
        [*  (soapyPS)         (behDynAware)]]
enddd
dd behDynPumpMin
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynAware))
        (min    (behDynPumpRespMax)))
enddd
dd behDynPumpMax
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynPumpRespMax))
        (min    (behDynPumpRespMed)))
enddd
dd behDynPumpVid
(responsive'    (none   (behDynAware))
        (video  (behDynPumpRespMax))
        (max    (behDynPumpRespMed))
        (min    (behDynPumpRespMin)))
enddd
dd behDynDryRespMax
    [+  [*  (wetPS)     [* [+ (behDynAwarePrompt) [* (strangeConstant) (dryBehavior)]]
                   [+ (notDryBehavior) [* (responseFactorMax) (dryBehavior)]]]]
        [*  (dryPS)       (behDynAware)]]
enddd
dd behDynDryRespMed
    [+  [*  (wetPS)     [* [+ (behDynAwarePrompt) [* (strangeConstant) (dryBehavior)]]
                   [+ (notDryBehavior) [* (responseFactorMed) (dryBehavior)]]]]
        [*  (dryPS)       (behDynAware)]]
enddd
dd behDynDryRespMin
    [+  [*  (wetPS)     [* [+ (behDynAwarePrompt) [* (strangeConstant) (dryBehavior)]]
                   [+ (notDryBehavior) [* (responseFactorMin) (dryBehavior)]]]]
        [*  (dryPS)       (behDynAware)]]
enddd
dd behDynDryMin
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynAware))
        (min    (behDynDryRespMax)))
enddd
dd behDynDryMax
(responsive'    (none   (behDynAware))
        (video  (behDynAware))
        (max    (behDynDryRespMax))
        (min    (behDynDryRespMed)))
enddd
dd behDynDryVid
(responsive'    (none   (behDynAware))
        (video  (behDynDryRespMax))
        (max    (behDynDryRespMed))
        (min    (behDynDryRespMin)))
enddd
dd samebehDynamics
   [+
      [*   (behavior=behavior')   (samebeh'=yes)]
      [*    [+  (1.0)   [*  (-1.0)  (behavior=behavior')]]
        (samebeh'=no)]
   ]
enddd
dd handlocsOF
       (behavior'  (away  (handlocs' (away  (0.90))
                     (sink (0.001))
                     (water (0.001))
                     (tap (0.001))
                     (soap (0.001))
                     (towel (0.001))
                     (onewater (0.001))
                     (onesoap (0.001))
                     (onetowel (0.001))
                     (tapwater (0.001))
                     (watertowel (0.001))))
           (sink  (handlocs' (away  (0.001))
                     (sink (0.90))
                     (water (0.001))
                     (tap (0.001))
                     (soap (0.001))
                     (towel (0.001))
                     (onewater (0.001))
                     (onesoap (0.001))
                     (onetowel (0.001))
                     (tapwater (0.001))
                     (watertowel (0.001))))
           (wet   (handlocs' (away  (0.001))
                     (sink (0.001))
                     (water (0.90))
                     (tap (0.001))
                     (soap (0.001))
                     (towel (0.001))
                     (onewater (0.2))
                     (onesoap (0.001))
                     (onetowel (0.001))
                     (tapwater (0.001))
                     (watertowel (0.001))))
           (taps  (handlocs' (away  (0.001))
                     (sink (0.001))
                     (water (0.001))
                     (tap (0.60))
                     (soap (0.001))
                     (towel (0.001))
                     (onewater (0.001))
                     (onesoap (0.001))
                     (onetowel (0.001))
                     (tapwater (0.5))
                     (watertowel (0.001))))
           (soap  (handlocs' (away  (0.001))
                     (sink (0.001))
                     (water (0.001))
                     (tap (0.001))
                     (soap (0.9))
                     (towel (0.001))
                     (onewater (0.001))
                     (onesoap (0.10))
                     (onetowel (0.001))
                     (tapwater (0.001))
                     (watertowel (0.001))))
           (dry   (handlocs' (away  (0.001))
                     (sink (0.001))
                     (water (0.001))
                     (tap (0.001))
                     (soap (0.001))
                     (towel (0.90))
                     (onewater (0.001))
                     (onesoap (0.001))
                     (onetowel (0.20))
                     (tapwater (0.001))
                     (watertowel (0.1)))))
enddd
dd timeoutOF
   (samebeh'    (no (timeout'   (no (1.0))  (yes    (0.0))))
        (yes    (timeout'   (no (0.1))  (yes    (0.9)))))
enddd
// the pstepo is always none if the caregiver was not called
dd pstepoOFnull
   (pstepo' (none   (1.0))
        (a  (0.0))
        (b  (0.0))
        (d  (0.0))
        (e  (0.0))
        (g  (0.0))
        (j  (0.0))
        (h  (0.0))
        (k  (0.0)))
enddd
// this observation function is used only when the caregiver is called
// actually, and gives the POMDP perfect information about the planstep
// but only specifies for plansteps that would be reached after a caregiver intervention
dd pstepoOF
   (planstep'   (a  (pstepo'    (none   (0.0))
                (a  (1.0))
                (b  (0.0))
                (d  (0.0))
                (e  (0.0))
                (g  (0.0))
                (j  (0.0))
                (h  (0.0))
                (k  (0.0))))
        (b  (pstepo'    (none   (0.0))
                (a  (0.0))
                (b  (1.0))
                (d  (0.0))
                (e  (0.0))
                (g  (0.0))
                (j  (0.0))
                (h  (0.0))
                (k  (0.0))))
        (d  (pstepo'    (none   (0.0))
                (a  (0.0))
                (b  (0.0))
                (d  (1.0))
                (e  (0.0))
                (g  (0.0))
                (j  (0.0))
                (h  (0.0))
                (k  (0.0))))
        (e  (pstepo'    (none   (0.0))
                (a  (0.0))
                (b  (0.0))
                (d  (0.0))
                (e  (1.0))
                (g  (0.0))
                (j  (0.0))
                (h  (0.0))
                (k  (0.0))))
        (g  (pstepo'    (none   (0.0))
                (a  (0.0))
                (b  (0.0))
                (d  (0.0))
                (e  (0.0))
                (g  (1.0))
                (j  (0.0))
                (h  (0.0))
                (k  (0.0))))
        (h  (pstepo'    (none   (0.0))
                (a  (0.0))
                (b  (0.0))
                (d  (0.0))
                (e  (0.0))
                (g  (0.0))
                (j  (0.0))
                (h  (1.0))
                (k  (0.0))))
        (j  (pstepo'    (none   (0.0))
                (a  (0.0))
                (b  (0.0))
                (d  (0.0))
                (e  (0.0))
                (g  (0.0))
                (j  (1.0))
                (h  (0.0))
                (k  (0.0))))
        (k  (pstepo'    (none   (0.0))
                (a  (0.0))
                (b  (0.0))
                (d  (0.0))
                (e  (0.0))
                (g  (0.0))
                (j  (0.0))
                (h  (0.0))
                (k  (1.0)))))
enddd

mdp handwashingMDP

    // observable variables
    observable (planstep handswashed samebeh behavior responsive aware demlev lp lpspec promptCost specCost reward)

    // hidden variables
    //hidden (handlocs timeout pstepo)

    // controllable variables
    controllable (prompt spec)

    // utility variables
    utility (promptCost specCost reward)

    // priors
    planstep (planstep=g)
    handswashed (handswashed=false)
    behavior (behavior=wet)
    responsive(responsive=video)
    aware(aware=no)
    demlev (demlev = hi)
    lp (lp=soap)
    lpspec (lpspec=min)

    samebeh (samebeh=no)
    //responsive [# responsive (responsive (none (0.001)) (video (0.01)) (max  (0.1)) (min (0.9)))]
    //aware [# aware (aware (never (0.01)) (no (0.5)) (yes (0.5)))]
    //demlev (demlev       (lo (0.7)) (med (0.2)) (hi (0.1)))

    // cpts
    planstep' [# planstep' (prompt (nothing (planstepdd_none))
                                   (call_caregiver (nextpsdd))
                           (tap_on (planstepdd_tapon))
                           (tap_off (planstepdd_tapoff))
                           (use_pump (planstepdd_pump))
                           (ALLOTHERS (planstepdd_other)))]

    aware' [# aware' (prompt (nothing (lp (none (awarDynamicsNull))
                                  (cg (awarDynamicsCG))
                              (ALLOTHERS (lpspec (min (awarDynamicsMin))
                                         (max (awarDynamicsMax))
                                             (vid (awarDynamicsVideo))))))
                             (call_caregiver(awarDynamicsCG))
                     (ALLOTHERS (spec (min (awarDynamicsMin))
                                              (max (awarDynamicsMax))
                                              (vid (awarDynamicsVideo)))))]

    responsive' [# responsive' (prompt (call_caregiver (respDynamicsCG))
                                       (ALLOTHERS (respDynamics)))]

    handswashed' (hwdd)

    demlev' (demlev=demlev')

    behavior' [# behavior' (prompt (nothing (lp (none (behDynAware))
                       (cg (behDynAware))
                       (wet (lpspec (min (behDynWetMin))
                            (max (behDynWetMax))
                            (vid (behDynWetVid))))
                       (wateron (lpspec (min (behDynWaterOnMin))
                                (max (behDynWaterOnMax))
                                (vid (behDynWaterOnVid))))
                       (tapon (lpspec (min (behDynTapOnMin))
                              (max (behDynTapOnMax))
                              (vid (behDynTapOnVid))))
                       (wateroff (lpspec  (min (behDynWaterOffMin))
                                  (max (behDynWaterOffMax))
                                  (vid (behDynWaterOffVid))))
                       (tapoff (lpspec (min (behDynTapOffMin))
                               (max (behDynTapOffMax))
                               (vid (behDynTapOffVid))))
                       (soap (lpspec (min (behDynSoapMin))
                             (max (behDynSoapMax))
                                 (vid (behDynSoapVid))))
                       (pump (lpspec (min (behDynPumpMin))
                             (max (behDynPumpMax))
                                 (vid (behDynPumpVid))))
                       (dry (lpspec (min (behDynDryMin))
                            (max (behDynDryMax))
                            (vid (behDynDryVid))))))
                      (call_caregiver (nullBehavior))
              (wet_hands (spec (min (behDynWetMin))
                       (max (behDynWetMax))
                       (vid (behDynWetVid))))
                      (turnon_water (spec (min (behDynWaterOnMin))
                          (max (behDynWaterOnMax))
                          (vid (behDynWaterOnVid))))
              (tap_on (spec (min (behDynTapOnMin))
                        (max (behDynTapOnMax))
                    (vid (behDynTapOnVid))))
              (turnoff_water (spec (min (behDynWaterOffMin))
                           (max (behDynWaterOffMax))
                           (vid (behDynWaterOffVid))))
              (tap_off (spec (min (behDynTapOffMin))
                         (max (behDynTapOffMax))
                     (vid (behDynTapOffVid))))
              (use_soap (spec (min (behDynSoapMin))
                      (max (behDynSoapMax))
                          (vid (behDynSoapVid))))
              (use_pump (spec (min (behDynPumpMin))
                      (max (behDynPumpMax))
                          (vid (behDynPumpVid))))
              (dry_hands (spec (min (behDynDryMin))
                       (max (behDynDryMax))
                       (vid (behDynDryVid)))))]

    lp' (prompt (nothing (lp'=none))
                (call_caregiver (lp'=cg))
        (wet_hands (lp'=wet))
                (turnon_water (lp'=wateron))
        (tap_on (lp'=tapon))
        (turnoff_water (lp'=wateroff))
        (tap_off (lp'=tapoff))
        (use_soap (lp'=soap))
        (use_pump (lp'=pump))
        (dry_hands (lp'=dry)))
    lpspec' (spec (min (lpspec'=min))
                  (max (lpspec'=max))
                  (vid (lpspec'=vid)))

    samebeh' (samebehDynamics)

    // observations
    //handlocs' (handlocsOF)
    //timeout' (prompt (call_caregiver (timeout'=no))
    //                 (ALLOTHERS (timeoutOF)))
    //pstepo' (pstepoOFnull)


    // utilities
    reward' (handswashed (false (planstep (k (reward'=20.0))
                                          (ALLOTHERS (reward'=0.0))))
                         (true (reward'=0.0)))
    specCost' (prompt (nothing (nothingCostFunc))
              (call_caregiver (aware (never (caregiverCostNeverAware))
                         (no (caregiverCostNotAware))
                         (yes (caregiverCostAware))))
                      (ALLOTHERS (spec (min (minCostAwaFunc))
                                       (max (maxCostAwaFunc))
                                       (vid (vidCostAwaFunc)))))
    promptCost' (prompt (nothing (promptCost'=0.0))
            (ALLOTHERS (ssPromptCostFunc)))

    discount (0.95)
    horizon (20)
endmdp
